
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #====================================================================
> # tests for predict
> #====================================================================
> library(FLa4a)
Loading required package: copula
Loading required package: FLCore
Loading required package: grid
Loading required package: lattice
Loading required package: MASS
FLCore 2.5.0 development version


Attaching package: ‘FLCore’

The following objects are masked from ‘package:base’:

    cbind, rbind

Loading required package: mgcv
Loading required package: nlme
This is mgcv 1.7-26. For overview type 'help("mgcv-package")'.
Loading required package: splines
Loading required package: triangle
This is FLa4a 0.98.0. For overview type 'help("FLa4a-package")'

> data(ple4)
> data(ple4.index)
> 
> #====================================================================
> # abundance indices
> #====================================================================
> fit <-  a4aSCA(ple4, FLIndices(ple4.index))
Note: The following observations are treated as being missing at random:
	    fleet year age
	 BTS-Isis 1997   1
	 BTS-Isis 1997   2
      Predictions will be made for missing observations.
> flqs <- predict(fit)
> 
> #--------------------------------------------------------------------
> # check
> #--------------------------------------------------------------------
> sfrac <- mean(range(ple4.index)[c("startf", "endf")])
> Z <- (m(ple4) + harvest(fit))*sfrac
> lst <- dimnames(fit@index[[1]])
> lst$x <- stock.n(fit)*exp(-Z)
> stkn <- do.call("trim", lst)
> qhat <- index(fit)[[1]]/stkn
> all.equal(c(qhat), c(flqs$qmodel[[1]]))
[1] TRUE
> all.equal(c(harvest(fit)), c(flqs$stkmodel$harvest), tolerance=10e-4)
[1] TRUE
> all.equal(c(stock.n(fit)[,1]), c(flqs$stkmodel$ny1), tolerance=10e-4)
[1] TRUE
> all.equal(c(stock.n(fit)[1]), c(flqs$stkmodel$rec), tolerance=10e-4)
[1] TRUE
> 
> #--------------------------------------------------------------------
> # N
> #--------------------------------------------------------------------
> fit <-  simulate(fit, 2)
> flqs <- predict(fit)
> sum(unlist(lapply(flqs, is, "FLQuants")))==3
[1] TRUE
> Z <- (m(ple4) + harvest(fit))*sfrac
> lst <- dimnames(fit@index[[1]])
> lst$x <- stock.n(fit)*exp(-Z)
> stkn <- do.call("trim", lst)
> qhat <- index(fit)[[1]]/stkn
> all.equal(c(qhat), c(flqs$qmodel[[1]]))
[1] TRUE
> all.equal(c(harvest(fit)), c(flqs$stkmodel$harvest), tolerance=10e-4)
[1] TRUE
> all.equal(c(stock.n(fit)[,1]), c(flqs$stkmodel$ny1), tolerance=10e-4)
[1] TRUE
> all.equal(c(stock.n(fit)[1]), c(flqs$stkmodel$rec), tolerance=10e-4)
[1] TRUE
> 
> #====================================================================
> # biomass indices
> #====================================================================
> bioidx <- FLIndex(FLQuant(NA, dimnames=list(age="all", year=range(ple4)["minyear"]:range(ple4)["maxyear"])), name="bioidx")
> index(bioidx) <- stock(ple4)*0.001
> index(bioidx) <- index(bioidx)*exp(rnorm(index(bioidx), sd=0.1))
> range(bioidx)[c("startf","endf")] <- c(0,0)
> 
> # fitting the model
> fit <- sca(ple4, FLIndices(bioidx), qmodel=list(~1), fit="assessment")
> flqs <- predict(fit)
> 
> #--------------------------------------------------------------------
> # check
> #--------------------------------------------------------------------
> sfrac <- mean(range(bioidx)[c("startf", "endf")])
> Z <- (m(ple4) + harvest(fit))*sfrac
> lst <- dimnames(fit@index[[1]])
> lst$x <- quantSums(stock.n(fit)*exp(-Z)*stock.wt(ple4))
> stkn <- do.call("trim", lst)
> qhat <- index(fit)[[1]]/stkn
> all.equal(c(qhat), c(flqs$qmodel[[1]]))
[1] TRUE
> all.equal(c(harvest(fit)), c(flqs$stkmodel$harvest), tolerance=10e-4)
[1] TRUE
> all.equal(c(stock.n(fit)[,1]), c(flqs$stkmodel$ny1), tolerance=10e-4)
[1] TRUE
> all.equal(c(stock.n(fit)[1]), c(flqs$stkmodel$rec), tolerance=10e-4)
[1] TRUE
> 
> #--------------------------------------------------------------------
> # further checks
> #--------------------------------------------------------------------
> qmod <- qmodel(pars(fit))[[1]]
> rngyear(qmod) <- NA
> rngage(qmod) <- NA
> obj <- predict(qmod)
> all.equal(dimnames(obj), dimnames(FLQuant(quant="age")))
[1] TRUE
> 
> #--------------------------------------------------------------------
> # N
> #--------------------------------------------------------------------
> fit <- simulate(fit, 2, stock=ple4)
> flqs <- predict(fit)
> sum(unlist(lapply(flqs, is, "FLQuants")))==3
[1] TRUE
> Z <- (m(ple4) + harvest(fit))*sfrac
> lst <- dimnames(fit@index[[1]])
> lst$x <- quantSums(stock.n(fit)*exp(-Z)*stock.wt(ple4))
> stkn <- do.call("trim", lst)
> qhat <- index(fit)[[1]]/stkn
> all.equal(c(qhat), c(flqs$qmodel[[1]]))
[1] TRUE
> all.equal(c(harvest(fit)), c(flqs$stkmodel$harvest), tolerance=10e-4)
[1] TRUE
> all.equal(c(stock.n(fit)[,1]), c(flqs$stkmodel$ny1), tolerance=10e-4)
[1] TRUE
> all.equal(c(stock.n(fit)[1]), c(flqs$stkmodel$rec), tolerance=10e-4)
[1] TRUE
> 
> #====================================================================
> # both
> #====================================================================
> 
> # fitting the model
> fit <- sca(ple4, FLIndices(bioidx, ple4.index), qmodel=list(~1, ~s(age, k=4)), fit="assessment")
Note: The following observations are treated as being missing at random:
	    fleet year age
	 BTS-Isis 1997   1
	 BTS-Isis 1997   2
      Predictions will be made for missing observations.
> flqs <- predict(fit)
> 
> #--------------------------------------------------------------------
> # check
> #--------------------------------------------------------------------
> sfrac <- mean(range(bioidx)[c("startf", "endf")])
> Z <- (m(ple4) + harvest(fit))*sfrac
> lst <- dimnames(fit@index[[1]])
> lst$x <- quantSums(stock.n(fit)*exp(-Z)*stock.wt(ple4))
> stkn <- do.call("trim", lst)
> qhat <- index(fit)[[1]]/stkn
> all.equal(c(qhat), c(flqs$qmodel[[1]]))
[1] TRUE
> 
> sfrac <- mean(range(ple4.index)[c("startf", "endf")])
> Z <- (m(ple4) + harvest(fit))*sfrac
> lst <- dimnames(fit@index[[2]])
> lst$x <- stock.n(fit)*exp(-Z)
> stkn <- do.call("trim", lst)
> qhat <- index(fit)[[2]]/stkn
> all.equal(c(qhat), c(flqs$qmodel[[2]]))
[1] "Mean relative difference: 0.3490006"
> 
> all.equal(c(harvest(fit)), c(flqs$stkmodel$harvest), tolerance=10e-4)
[1] TRUE
> all.equal(c(stock.n(fit)[,1]), c(flqs$stkmodel$ny1), tolerance=10e-4)
[1] TRUE
> all.equal(c(stock.n(fit)[1]), c(flqs$stkmodel$rec), tolerance=10e-4)
[1] TRUE
> 
> #--------------------------------------------------------------------
> # N
> #--------------------------------------------------------------------
> fit <- simulate(fit, 2, stock=ple4)
> flqs <- predict(fit)
> sum(unlist(lapply(flqs, is, "FLQuants")))==3
[1] TRUE
> 
> sfrac <- mean(range(bioidx)[c("startf", "endf")])
> Z <- (m(ple4) + harvest(fit))*sfrac
> lst <- dimnames(fit@index[[1]])
> lst$x <- quantSums(stock.n(fit)*exp(-Z)*stock.wt(ple4))
> stkn <- do.call("trim", lst)
> qhat <- index(fit)[[1]]/stkn
> all.equal(c(qhat), c(flqs$qmodel[[1]]))
[1] TRUE
> 
> sfrac <- mean(range(ple4.index)[c("startf", "endf")])
> Z <- (m(ple4) + harvest(fit))*sfrac
> lst <- dimnames(fit@index[[2]])
> lst$x <- stock.n(fit)*exp(-Z)
> stkn <- do.call("trim", lst)
> qhat <- index(fit)[[2]]/stkn
> all.equal(c(qhat), c(flqs$qmodel[[2]]))
[1] TRUE
> 
> all.equal(c(harvest(fit)), c(flqs$stkmodel$harvest), tolerance=10e-4)
[1] TRUE
> all.equal(c(stock.n(fit)[,1]), c(flqs$stkmodel$ny1), tolerance=10e-4)
[1] TRUE
> all.equal(c(stock.n(fit)[1]), c(flqs$stkmodel$rec), tolerance=10e-4)
[1] TRUE
> 
> 
> 
> proc.time()
   user  system elapsed 
 24.668   1.048  25.745 
