
R version 3.0.3 (2014-03-06) -- "Warm Puppy"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #====================================================================
> # tests for simulate
> #====================================================================
> library(FLa4a)
Loading required package: copula
Loading required package: FLCore
Loading required package: grid
Loading required package: lattice
Loading required package: MASS
FLCore (Version 2.5.20140819, packaged: Wed Sep  3 16:59:13 2014)

Attaching package: ‘FLCore’

The following objects are masked from ‘package:base’:

    cbind, rbind

Loading required package: mgcv
Loading required package: nlme
This is mgcv 1.7-28. For overview type 'help("mgcv-package")'.
Loading required package: splines
Loading required package: triangle
This is FLa4a RC2-0.130.00. For overview type 'help(package="FLa4a")'

> data(ple4)
> data(ple4.index)
> data(ple4.indices)
> nits <- 1000
> err <- 0.05
> 
> #====================================================================
> # check stkmodel
> #====================================================================
> fit <-  a4aSCA(ple4, FLIndices(ple4.index), qmodel=list(~s(age, k=4)), vmodel=list(~s(age, k=4), ~s(age, k=4)))
Note: The following observations are treated as being missing at random:
	    fleet year age
	 BTS-Isis 1997   1
	 BTS-Isis 1997   2
      Predictions will be made for missing observations.
> 
> # replicate with set.seed
> stkm <- stkmodel(pars(fit))
> obj <- simulate(stkm, seed=1234)
> identical(dim(obj@params), dim(stkm@params))
[1] TRUE
> identical(dim(obj@vcov), dim(stkm@vcov))
[1] TRUE
> 
> # empirical is different
> obj1 <- simulate(stkm, empirical=FALSE, seed=1234)
> !identical(obj1, obj)
[1] TRUE
> 
> # but seed sould replicate
> obj1 <- simulate(stkm, seed=1234)
> identical(obj1, obj)
[1] TRUE
> 
> # vcov should be the same ...
> obj <- simulate(stkm, nits, seed=1234)
> dim(obj@params)["iter"] == nits
iter 
TRUE 
> identical(dim(obj@vcov), dim(stkm@vcov))
[1] TRUE
> rat <- cov(t(obj@params))/stkm@vcov[,,1,drop=T]
> max(rat) - min(rat) < err/10
[1] TRUE
> 
> # while here it shouldn't ...
> obj <- simulate(stkm, nits, empirical = FALSE)
> rat <- cov(t(obj@params))/stkm@vcov[,,1,drop=T]
> max(rat) - min(rat) > err*4
[1] TRUE
> 
> #====================================================================
> # abundance indices
> #====================================================================
> 
> #--------------------------------------------------------------------
> # 1
> #--------------------------------------------------------------------
> fit <-  a4aSCA(ple4, FLIndices(ple4.index), qmodel=list(~s(age, k=4)), vmodel=list(~s(age, k=4), ~s(age, k=4)))
Note: The following observations are treated as being missing at random:
	    fleet year age
	 BTS-Isis 1997   1
	 BTS-Isis 1997   2
      Predictions will be made for missing observations.
> 
> # check it runs
> obj <- simulate(fit)
> is(obj, "a4aFitSA")
[1] TRUE
> validObject(obj)
[1] TRUE
> 
> # check vcov is not full of zeros
> sum(vcov(stkmodel(pars(obj)))==0)!=length(vcov(stkmodel(pars(obj))))
[1] TRUE
> sum(vcov(qmodel(pars(obj))[[1]])==0)!=length(vcov(qmodel(pars(obj))[[1]]))
[1] TRUE
> sum(vcov(vmodel(pars(obj))[[1]])==0)!=length(vcov(vmodel(pars(obj))[[1]]))
[1] TRUE
> sum(vcov(vmodel(pars(obj))[[2]])==0)!=length(vcov(vmodel(pars(obj))[[2]]))
[1] TRUE
> 
> # simulate from simulated object
> obj <- simulate(obj)
> is(obj, "a4aFitSA")
[1] TRUE
> validObject(obj)
[1] TRUE
> 
> # check it runs with nits
> obj <- simulate(fit, nits)
> is(obj, "a4aFitSA")
[1] TRUE
> validObject(obj)
[1] TRUE
> dim(catch.n(obj))[6] == nits
[1] TRUE
> 
> # check vcov is not full of zeros
> sum(vcov(stkmodel(pars(obj)))==0)!=length(vcov(stkmodel(pars(obj))))
[1] TRUE
> sum(vcov(qmodel(pars(obj))[[1]])==0)!=length(vcov(qmodel(pars(obj))[[1]]))
[1] TRUE
> sum(vcov(vmodel(pars(obj))[[1]])==0)!=length(vcov(vmodel(pars(obj))[[1]]))
[1] TRUE
> sum(vcov(vmodel(pars(obj))[[2]])==0)!=length(vcov(vmodel(pars(obj))[[2]]))
[1] TRUE
> 
> # check vcov has only one iter
> dim(vcov(stkmodel(pars(obj))))[3]==1
[1] TRUE
> dim(vcov(qmodel(pars(obj))[[1]]))[3]==1
[1] TRUE
> dim(vcov(vmodel(pars(obj))[[1]]))[3]==1
[1] TRUE
> dim(vcov(vmodel(pars(obj))[[2]]))[3]==1
[1] TRUE
> 
> # simulate from simulated object
> obj <- simulate(obj, nits)
> is(obj, "a4aFitSA")
[1] TRUE
> validObject(obj)
[1] TRUE
> dim(catch.n(obj))[6] == nits
[1] TRUE
> 
> # can the seed be controled ?
> obj0 <- simulate(fit, nits, 1234)
> obj1 <- simulate(fit, nits, 1234)
> all.equal(obj0, obj1)
[1] TRUE
> 
> # are the simulated values unbiased
> obj <- simulate(fit, nits, seed=1234)
> stk.fit <- stock.n(fit)
> stk.sim <- stock.n(obj)
> stk.rat <- iterMedians(stk.sim)/stk.fit
> f.fit <- harvest(fit)
> f.sim <- harvest(obj)
> f.rat <- iterMedians(f.sim)/f.fit
> idx.fit <- index(fit)[[1]]
> idx.sim <- index(obj)[[1]]
> idx.rat <- iterMedians(idx.sim)/idx.fit
> 
> max(stk.rat)-min(stk.rat) < err
[1] TRUE
> max(f.rat)-min(f.rat) < err
[1] TRUE
> max(idx.rat)-min(idx.rat) < err
[1] TRUE
> 
> # is the vcov matrix ok
> vce <- c(cov(t(params(qmodel(pars(obj))[[1]]))))
> vc <- vcov(qmodel(pars(obj))[[1]])[,,1,drop=TRUE]
> # check only those that have correlations stronger than 50%
> i <- c(abs(cov2cor(vc))>0.5)
> vrat <- vce[i]/c(vc)[i]
> max(vrat)-min(vrat) < err
[1] TRUE
> 
> vce <- c(cov(t(params(vmodel(pars(obj))[[1]]))))
> vc <- vcov(vmodel(pars(obj))[[1]])[,,1,drop=TRUE]
> # check only those that have correlations stronger than 50%
> i <- c(abs(cov2cor(vc))>0.5)
> vrat <- vce[i]/c(vc)[i]
> max(vrat)-min(vrat) < err
[1] TRUE
> 
> vce <- c(cov(t(params(vmodel(pars(obj))[[2]]))))
> vc <- vcov(vmodel(pars(obj))[[2]])[,,1,drop=TRUE]
> # check only those that have correlations stronger than 50%
> i <- c(abs(cov2cor(vc))>0.5)
> vrat <- vce[i]/c(vc)[i]
> max(vrat)-min(vrat) < err
[1] TRUE
> 
> vce <- c(cov(t(params(stkmodel(pars(obj))))))
> vc <- vcov(stkmodel(pars(obj)))[,,1,drop=TRUE]
> # check only those that have correlations stronger than 50%
> i <- c(abs(cov2cor(vc))>0.5)
> vrat <- vce[i]/c(vc)[i]
> max(vrat)-min(vrat) < err
[1] TRUE
> 
> # what about variance 
> vce <- c(diag(cov(t(params(qmodel(pars(obj))[[1]])))))
> vc <- diag(vcov(qmodel(pars(obj))[[1]])[,,1,drop=TRUE])
> vrat <- vce/c(vc)
> max(vrat)-min(vrat) < err
[1] TRUE
> 
> vce <- c(diag(cov(t(params(vmodel(pars(obj))[[1]])))))
> vc <- diag(vcov(vmodel(pars(obj))[[1]])[,,1,drop=TRUE])
> vrat <- vce/c(vc)
> max(vrat)-min(vrat) < err
[1] TRUE
> 
> vce <- c(diag(cov(t(params(vmodel(pars(obj))[[2]])))))
> vc <- diag(vcov(vmodel(pars(obj))[[2]])[,,1,drop=TRUE])
> vrat <- vce/c(vc)
> max(vrat)-min(vrat) < err
[1] TRUE
> 
> vce <- c(diag(cov(t(params(stkmodel(pars(obj)))))))
> vc <- diag(vcov(stkmodel(pars(obj)))[,,1,drop=TRUE])
> vrat <- vce/c(vc)
> max(vrat)-min(vrat) < err
[1] TRUE
> 
> #--------------------------------------------------------------------
> # several
> #--------------------------------------------------------------------
> fit <-  a4aSCA(ple4, ple4.indices, qmodel=list(~s(age, k=4), ~s(age, k=4), ~s(age, k=3)), vmodel=list(~s(age, k=4), ~s(age, k=4), ~s(age, k=4), ~s(age, k=3)))
Note: The following observations are treated as being missing at random:
	       fleet year age
	    BTS-Isis 1997   1
	    BTS-Isis 1997   2
	 BTS-Tridens 1997   1
	 BTS-Tridens 1997   2
	         SNS 1997   1
	         SNS 1997   2
	         SNS 2003   1
	         SNS 2003   2
	         SNS 2003   3
      Predictions will be made for missing observations.
> 
> # check
> obj <- simulate(fit)
> is(obj, "a4aFitSA")
[1] TRUE
> validObject(obj)
[1] TRUE
> 
> obj <- simulate(fit, nits)
> is(obj, "a4aFitSA")
[1] TRUE
> validObject(obj)
[1] TRUE
> dim(catch.n(obj))[6] == nits
[1] TRUE
> 
> # can the seed be controled ?
> obj0 <- simulate(fit, nits, 1234)
> obj1 <- simulate(fit, nits, 1234)
> all.equal(obj0, obj1)
[1] TRUE
> 
> # are the simulated values unbiased
> obj <- simulate(fit, 1000)
> stk.fit <- stock.n(fit)
> stk.sim <- stock.n(obj)
> stk.rat <- iterMedians(stk.sim)/stk.fit
> f.fit <- harvest(fit)
> f.sim <- harvest(obj)
> f.rat <- iterMedians(f.sim)/f.fit
> idx.fit <- index(fit)[[1]]
> idx.sim <- index(obj)[[1]]
> idx.rat <- iterMedians(idx.sim)/idx.fit
> idx2.fit <- index(fit)[[2]]
> idx2.sim <- index(obj)[[2]]
> idx2.rat <- iterMedians(idx2.sim)/idx2.fit
> idx3.fit <- index(fit)[[3]]
> idx3.sim <- index(obj)[[3]]
> idx3.rat <- iterMedians(idx3.sim)/idx3.fit
> 
> max(stk.rat)-min(stk.rat) < err
[1] TRUE
> max(f.rat)-min(f.rat) < err
[1] TRUE
> max(idx.rat)-min(idx.rat) < err
[1] TRUE
> max(idx2.rat)-min(idx2.rat) < err
[1] TRUE
> max(idx3.rat)-min(idx3.rat) < err
[1] TRUE
> 
> #====================================================================
> # biomass index
> #====================================================================
> bioidx <- FLIndexBiomass(FLQuant(NA, dimnames=list(age="all", year=range(ple4)["minyear"]:range(ple4)["maxyear"])), name="bioidx")
> index(bioidx) <- stock(ple4)*0.001
> index(bioidx) <- index(bioidx)*exp(rnorm(index(bioidx), sd=0.1))
> range(bioidx)[c("startf","endf")] <- c(0,0)
> 
> # fitting the model
> fit <- a4aSCA(ple4, FLIndices(bioidx), qmodel=list(~1))
> 
> #--------------------------------------------------------------------
> # check
> #--------------------------------------------------------------------
> 
> # now the classes
> obj <- simulate(fit)
> is(obj, "a4aFitSA")
[1] TRUE
> validObject(obj)
[1] TRUE
> 
> obj <- simulate(fit, nits)
> is(obj, "a4aFitSA")
[1] TRUE
> validObject(obj)
[1] TRUE
> dim(catch.n(obj))[6] == nits
[1] TRUE
> 
> # can the seed be controled ?
> set.seed(1234)
> obj0 <- simulate(fit, nits)
> set.seed(1234)
> obj1 <- simulate(fit, nits)
> all.equal(obj0, obj1)
[1] TRUE
> 
> # are the simulated values unbiased
> obj <- simulate(fit, 1000)
> stk.fit <- stock.n(fit)
> stk.sim <- stock.n(obj)
> stk.rat <- iterMedians(stk.sim)/stk.fit
> f.fit <- harvest(fit)
> f.sim <- harvest(obj)
> f.rat <- iterMedians(f.sim)/f.fit
> idx.fit <- index(fit)[[1]]
> idx.sim <- index(obj)[[1]]
> idx.rat <- iterMedians(idx.sim)/idx.fit
> 
> max(stk.rat)-min(stk.rat) < err
[1] TRUE
> max(f.rat)-min(f.rat) < err
[1] TRUE
> max(idx.rat)-min(idx.rat) < err
[1] TRUE
> 
> #====================================================================
> # biomass and abundance indices
> #====================================================================
> 
> # fitting the model
> fit <- sca(ple4, FLIndices(bioidx, ple4.index), qmodel=list(~1, ~s(age, k=4)), fit="assessment")
Note: The following observations are treated as being missing at random:
	    fleet year age
	 BTS-Isis 1997   1
	 BTS-Isis 1997   2
      Predictions will be made for missing observations.
> 
> #--------------------------------------------------------------------
> # check
> #--------------------------------------------------------------------
> 
> # now the classes
> obj <- simulate(fit)
> is(obj, "a4aFitSA")
[1] TRUE
> validObject(obj)
[1] TRUE
> 
> obj <- simulate(fit, nits)
> is(obj, "a4aFitSA")
[1] TRUE
> validObject(obj)
[1] TRUE
> dim(catch.n(obj))[6] == nits
[1] TRUE
> 
> # can the seed be controled ?
> obj0 <- simulate(fit, nits, 1234)
> obj1 <- simulate(fit, nits, 1234)
> all.equal(obj0, obj1)
[1] TRUE
> 
> # are the simulated values unbiased
> obj <- simulate(fit, 1000)
> stk.fit <- stock.n(fit)
> stk.sim <- stock.n(obj)
> stk.rat <- iterMedians(stk.sim)/stk.fit
> f.fit <- harvest(fit)
> f.sim <- harvest(obj)
> f.rat <- iterMedians(f.sim)/f.fit
> idx.fit <- index(fit)[[1]]
> idx.sim <- index(obj)[[1]]
> idx.rat <- iterMedians(idx.sim)/idx.fit
> idx2.fit <- index(fit)[[2]]
> idx2.sim <- index(obj)[[2]]
> idx2.rat <- iterMedians(idx2.sim)/idx2.fit
> 
> max(stk.rat)-min(stk.rat) < err
[1] TRUE
> max(f.rat)-min(f.rat) < err
[1] TRUE
> max(idx.rat)-min(idx.rat) < err
[1] TRUE
> max(idx2.rat)-min(idx2.rat) < err
[1] TRUE
> 
> # is the vcov matrix ok
> vce <- c(cov(t(params(qmodel(pars(obj))[[2]]))))
> vc <- vcov(qmodel(pars(obj))[[2]])[,,1,drop=TRUE]
> # check only those that have correlations stronger than 50%
> i <- c(abs(cov2cor(vc))>0.5)
> vrat <- vce[i]/c(vc)[i]
> max(vrat)-min(vrat) < err
[1] TRUE
> 
> vce <- c(cov(t(params(vmodel(pars(obj))[[1]]))))
> vc <- vcov(vmodel(pars(obj))[[1]])[,,1,drop=TRUE]
> # check only those that have correlations stronger than 50%
> i <- c(abs(cov2cor(vc))>0.5)
> vrat <- vce[i]/c(vc)[i]
> max(vrat)-min(vrat) < err
[1] TRUE
> 
> vce <- c(cov(t(params(stkmodel(pars(obj))))))
> vc <- vcov(stkmodel(pars(obj)))[,,1,drop=TRUE]
> # check only those that have correlations stronger than 50%
> i <- c(abs(cov2cor(vc))>0.5)
> vrat <- vce[i]/c(vc)[i]
> max(vrat)-min(vrat) < err
[1] TRUE
> 
> # what about variance 
> vce <- c(diag(cov(t(params(qmodel(pars(obj))[[2]])))))
> vc <- diag(vcov(qmodel(pars(obj))[[2]])[,,1,drop=TRUE])
> vrat <- vce/c(vc)
> max(vrat)-min(vrat) < err
[1] TRUE
> 
> vce <- c(diag(cov(t(params(vmodel(pars(obj))[[1]])))))
> vc <- diag(vcov(vmodel(pars(obj))[[1]])[,,1,drop=TRUE])
> vrat <- vce/c(vc)
> max(vrat)-min(vrat) < err
[1] TRUE
> 
> vce <- c(diag(cov(t(params(stkmodel(pars(obj)))))))
> vc <- diag(vcov(stkmodel(pars(obj)))[,,1,drop=TRUE])
> vrat <- vce/c(vc)
> max(vrat)-min(vrat) < err
[1] TRUE
> 
> #====================================================================
> # more than one iter in vcov, coming from assessments with iters
> #====================================================================
> 
> fit0 <-  a4aSCA(ple4, FLIndices(ple4.index), qmodel=list(~s(age, k=4)))
Note: The following observations are treated as being missing at random:
	    fleet year age
	 BTS-Isis 1997   1
	 BTS-Isis 1997   2
      Predictions will be made for missing observations.
> nits <- 3
> 
> stk2 <- ple4
> idx2 <- ple4.index
> catch.n(stk2) <- genFLQuant(catch.n(stk2), 0.1, niter=nits)
> index(idx2) <- genFLQuant(index(fit0)[[1]], 0.1, niter=nits)
> 
> fit <- a4aSCA(stk2, FLIndices(idx2), qmodel=list(~s(age, k=4)))
> 
> # check it runs
> obj <- simulate(fit)
> is(obj, "a4aFitSA")
[1] TRUE
> validObject(obj)
[1] TRUE
> 
> # check it fails with nsim != nits
> is(try(simulate(fit, nits+1)), "try-error")
Error in .local(object, nsim, seed, ...) : 
  The number of iters and simulations must be 1 or n.
[1] TRUE
> 
> # check vcov has nits iters
> dim(vcov(stkmodel(pars(obj))))[3]==nits
[1] TRUE
> dim(vcov(qmodel(pars(obj))[[1]]))[3]==nits
[1] TRUE
> dim(vcov(vmodel(pars(obj))[[1]]))[3]==nits
[1] TRUE
> dim(vcov(vmodel(pars(obj))[[2]]))[3]==nits
[1] TRUE
> 
> # check vcov is not full of zeros
> sum(vcov(stkmodel(pars(obj)))==0)!=length(vcov(stkmodel(pars(obj))))
[1] TRUE
> sum(vcov(qmodel(pars(obj))[[1]])==0)!=length(vcov(qmodel(pars(obj))[[1]]))
[1] TRUE
> sum(vcov(vmodel(pars(obj))[[1]])==0)!=length(vcov(vmodel(pars(obj))[[1]]))
[1] TRUE
> sum(vcov(vmodel(pars(obj))[[2]])==0)!=length(vcov(vmodel(pars(obj))[[2]]))
[1] TRUE
> 
> # simulate from simulated object
> obj <- simulate(obj)
> is(obj, "a4aFitSA")
[1] TRUE
> validObject(obj)
[1] TRUE
> 
> # check vcov has nits iters
> dim(vcov(stkmodel(pars(obj))))[3]==nits
[1] TRUE
> dim(vcov(qmodel(pars(obj))[[1]]))[3]==nits
[1] TRUE
> dim(vcov(vmodel(pars(obj))[[1]]))[3]==nits
[1] TRUE
> dim(vcov(vmodel(pars(obj))[[2]]))[3]==nits
[1] TRUE
> 
> # check it runs with nits
> obj <- simulate(fit, nits)
> is(obj, "a4aFitSA")
[1] TRUE
> validObject(obj)
[1] TRUE
> dim(catch.n(obj))[6] == nits
[1] TRUE
> 
> # check vcov has nits iters
> dim(vcov(stkmodel(pars(obj))))[3]==nits
[1] TRUE
> dim(vcov(qmodel(pars(obj))[[1]]))[3]==nits
[1] TRUE
> dim(vcov(vmodel(pars(obj))[[1]]))[3]==nits
[1] TRUE
> dim(vcov(vmodel(pars(obj))[[2]]))[3]==nits
[1] TRUE
> 
> # check vcov is not full of zeros
> sum(vcov(stkmodel(pars(obj)))==0)!=length(vcov(stkmodel(pars(obj))))
[1] TRUE
> sum(vcov(qmodel(pars(obj))[[1]])==0)!=length(vcov(qmodel(pars(obj))[[1]]))
[1] TRUE
> sum(vcov(vmodel(pars(obj))[[1]])==0)!=length(vcov(vmodel(pars(obj))[[1]]))
[1] TRUE
> sum(vcov(vmodel(pars(obj))[[2]])==0)!=length(vcov(vmodel(pars(obj))[[2]]))
[1] TRUE
> 
> # simulate from simulated object
> obj <- simulate(obj, nits)
> is(obj, "a4aFitSA")
[1] TRUE
> validObject(obj)
[1] TRUE
> dim(catch.n(obj))[6] == nits
[1] TRUE
> 
> # can the seed be controled ?
> obj0 <- simulate(fit, nits, 1234)
> obj1 <- simulate(fit, nits, 1234)
> all.equal(obj0, obj1)
[1] TRUE
> 
> # are the simulated values unbiased
> obj <- simulate(fit, nits)
> stk.fit <- stock.n(fit)
> stk.sim <- stock.n(obj)
> stk.rat <- iterMedians(stk.sim)/iterMedians(stk.fit)
> f.fit <- harvest(fit)
> f.sim <- harvest(obj)
> f.rat <- iterMedians(f.sim)/iterMedians(f.fit)
> idx.fit <- index(fit)[[1]]
> idx.sim <- index(obj)[[1]]
> idx.rat <- iterMedians(idx.sim)/iterMedians(idx.fit)
> 
> max(stk.rat)-min(stk.rat) < 4*err
[1] FALSE
> max(f.rat)-min(f.rat) < 4*err
[1] FALSE
> max(idx.rat)-min(idx.rat) < 4*err
[1] FALSE
> 
> 
> 
> proc.time()
   user  system elapsed 
224.455   2.918 227.387 
